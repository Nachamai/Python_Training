##1. How to see the list of mounted devices on a Linux system?

[ec2-user@ip-172-31-35-6 dir2]$ mount
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
devtmpfs on /dev type devtmpfs (rw,nosuid,size=492680k,nr_inodes=123170,mode=755)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,nodev,mode=755)
tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)
pstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)
cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)
cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
/dev/xvda1 on / type xfs (rw,noatime,attr2,inode64,noquota)
mqueue on /dev/mqueue type mqueue (rw,relatime)
hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,pagesize=2M)
systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=33,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=12453)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw,relatime)
tmpfs on /run/user/1000 type tmpfs (rw,nosuid,nodev,relatime,size=100692k,mode=700,uid=1000,gid=1000)

##2. How to check disk usage in terms of kilobytes(K), megabytes(M) and
gigabytes(G)?

[ec2-user@ip-172-31-35-6 dir2]$ free -m
              total        used        free      shared  buff/cache   available
Mem:            983          94         378           0         510         747
Swap:             0           0           0
[ec2-user@ip-172-31-35-6 dir2]$ free -g
              total        used        free      shared  buff/cache   available
Mem:              0           0           0           0           0           0
Swap:             0           0           0
[ec2-user@ip-172-31-35-6 dir2]$ free -k
              total        used        free      shared  buff/cache   available
Mem:        1006896       96560      388072         400      522264      765712
Swap:             0           0           0

##3. What is Swap Space? What is a typical size for a swap partition in Linux?

Swap space is the area on a hard disk. It is a part of your machine's Virtual Memory, which is a combination of accessible physical memory (RAM) and the swap space. Swap holds memory pages that are temporarily inactive.
Amount of system RAM                  Recommended swap space 
2 GB - 8 GB   		                 Equal to the amount of RAM    
8 GB - 64 GB            		   0.5 times the amount of RAM 
more than 64 GB    		   workload dependent                            

##4. How would you schedule a task in Linux?

In the case of Linux, it comes with two basic but powerful tools: Cron daemon (default task scheduler) and at (more suitable for one-time task scheduling).
[ec2-user@ip-172-31-35-6 dir2]$ crontab -l
no crontab for ec2-user

##5. How these commands would be working try and explain (files contain
“hello” word) :
•	grep -v -i hello file1.txt
[ec2-user@ip-172-31-35-6 dir2]$ cat file4.txt
hello this is first line
this is a sample file
first week of learning over
HELLO 4 more weeks to go
3 more projects to submit
hello there
this is python language
so much fun
interesting!
Hello!

[ec2-user@ip-172-31-35-6 dir2]$ grep -v -i hello file4.txt
this is a sample file
first week of learning over
3 more projects to submit
this is python language
so much fun
interesting!

-v inverts the selection of the word hello
-i ignore the case of hello
So uppercase and lowercase hello has been removed in the output

•	grep -i hello file2.txt
[ec2-user@ip-172-31-35-6 dir2]$ grep -i hello file4.txt
hello this is first line
HELLO 4 more weeks to go
hello there
Hello!

The casing of hello is ignored, the sentences that contain the word hello are printed in the output.
•	grep -A 2 hello file2.txt
[ec2-user@ip-172-31-35-6 dir2]$ grep -A 2 hello file4.txt
hello this is first line
this is a sample file
first week of learning over
--
hello there
this is python language
so much fun

Two lines after encountering the word hello is printed as output

•	grep -C 4 hello file1.txt
[ec2-user@ip-172-31-35-6 dir2]$ grep -C 4 hello file4.txt
hello this is first line
this is a sample file
first week of learning over
HELLO 4 more weeks to go
3 more projects to submit
hello there
this is python language
so much fun
interesting!
Hello!

This -C 4 prints 4 lines before and after the match for the word hello.

•	grep -B 3 hello file1.txt
[ec2-user@ip-172-31-35-6 dir2]$ grep -B 3 hello file4.txt
hello this is first line
--
first week of learning over
HELLO 4 more weeks to go
3 more projects to submit
hello there

To print 3 lines before a match

•	ps -ef | more
Command to display the currently running processes with process id
[ec2-user@ip-172-31-35-6 dir2]$ ps -ef|more
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Mar29 ?        00:00:06 /usr/lib/systemd/systemd --switched-root --system --deserialize 21
root         2     0  0 Mar29 ?        00:00:00 [kthreadd]
root         4     2  0 Mar29 ?        00:00:00 [kworker/0:0H]
root         5     2  0 Mar29 ?        00:00:01 [kworker/u30:0]
root         6     2  0 Mar29 ?        00:00:00 [mm_percpu_wq]
root         7     2  0 Mar29 ?        00:00:00 [ksoftirqd/0]
root         8     2  0 Mar29 ?        00:00:01 [rcu_sched]
root         9     2  0 Mar29 ?        00:00:00 [rcu_bh]
root        10     2  0 Mar29 ?        00:00:00 [migration/0]
root        11     2  0 Mar29 ?        00:00:01 [watchdog/0]
root        12     2  0 Mar29 ?        00:00:00 [cpuhp/0]
root        14     2  0 Mar29 ?        00:00:00 [kdevtmpfs]
root        15     2  0 Mar29 ?        00:00:00 [netns]
root       174     2  0 Mar29 ?        00:00:00 [khungtaskd]
root       175     2  0 Mar29 ?        00:00:00 [oom_reaper]
root       176     2  0 Mar29 ?        00:00:00 [writeback]
root       178     2  0 Mar29 ?        00:00:00 [kcompactd0]
root       179     2  0 Mar29 ?        00:00:00 [ksmd]
root       180     2  0 Mar29 ?        00:00:00 [khugepaged]
root       181     2  0 Mar29 ?        00:00:00 [crypto]
root       182     2  0 Mar29 ?        00:00:00 [kintegrityd]
root       184     2  0 Mar29 ?        00:00:00 [kblockd]
root       535     2  0 Mar29 ?        00:00:00 [md]
root       538     2  0 Mar29 ?        00:00:00 [edac-poller]
root       543     2  0 Mar29 ?        00:00:00 [watchdogd]
root       684     2  0 Mar29 ?        00:00:00 [kauditd]
root       690     2  0 Mar29 ?        00:00:00 [kswapd0]
root       788     2  0 05:36 ?        00:00:00 [kworker/u30:2]
root       818     2  0 05:42 ?        00:00:00 [kworker/0:0]
root       822     2  0 Mar29 ?        00:00:00 [kthrotld]
root       828     2  0 05:47 ?        00:00:00 [kworker/0:2]
root       833     2  0 Mar29 ?        00:00:00 [xenbus]
root       834     2  0 Mar29 ?        00:00:00 [xenwatch]
root       876     2  0 Mar29 ?        00:00:00 [kstrp]
root       899     2  0 05:54 ?        00:00:00 [kworker/0:1]
root       903     2  0 Mar29 ?        00:00:00 [ipv6_addrconf]
root       925     2  0 05:54 ?        00:00:00 [kworker/0:3]
ec2-user   936 31847  0 05:57 pts/2    00:00:00 ps -ef
ec2-user   937 31847  0 05:57 pts/2    00:00:00 more
root      1539     2  0 Mar29 ?        00:00:00 [ata_sff]
root      1556     2  0 Mar29 ?        00:00:00 [scsi_eh_0]
root      1557     2  0 Mar29 ?        00:00:00 [scsi_tmf_0]
--More—

•	awk '{print $2,$5;}' file4.txt
[ec2-user@ip-172-31-35-6 dir2]$ awk '{print $2,$5;}' file4.txt
this line
is file
week over
4 to
more submit
there
is
much
[ec2-user@ip-172-31-35-6 dir2]$ cat file4.txt
hello this is first line
this is a sample file
first week of learning over
HELLO 4 more weeks to go
3 more projects to submit
hello there
this is python language
so much fun
interesting!
Hello!

For each record i.e line, the awk command splits the record delimited by whitespace character by default and stores it in the $n variables. If the line has 4 words, it will be stored in $1, $2, $3 and $4 respectively. Also, $0 represents the whole line. 
So the second and fifth word from each line was taken and printed as output.

##6. What is the export command used for?(Give Example)
The export command is a built-in utility of Linux Bash shell. It is used to ensure the environment variables and functions to be passed to child processes. It does not affect the existing environment variable.
Environment variables are set when we open a new shell session. At any time, if we change any variable value, the shell has no way to select that change. The export command allows us to update the current session about the changes that have been made to the exported variable. We do not need to wait to start a new shell session.
Syntax: export [-f] [-n] [name[=value] ...] or export -p  
[ec2-user@ip-172-31-35-6 dir2]$ export -p
declare -x HISTCONTROL="ignoredups"
declare -x HISTSIZE="1000"
declare -x HOME="/home/ec2-user"
declare -x HOSTNAME="ip-172-31-35-6.us-east-2.compute.internal"
declare -x LANG="en_US.UTF-8"
declare -x LESSOPEN="||/usr/bin/lesspipe.sh %s"
declare -x LOGNAME="ec2-user"
declare -x LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:"
declare -x MAIL="/var/spool/mail/ec2-user"
declare -x OLDPWD="/home/ec2-user"
declare -x PATH="/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/ec2-user/.local/bin:/home/ec2-user/bin"
declare -x PWD="/home/ec2-user/dir2"
declare -x SHELL="/bin/bash"
declare -x SHLVL="1"
declare -x SSH_CLIENT="24.171.17.203 52728 22"
declare -x SSH_CONNECTION="24.171.17.203 52728 172.31.35.6 22"
declare -x SSH_TTY="/dev/pts/2"
declare -x TERM="xterm"
declare -x USER="ec2-user"
declare -x XDG_RUNTIME_DIR="/run/user/1000"
declare -x XDG_SESSION_ID="759"

##7. Explain the redirection operator?
Redirection Operator	Explanation	Example
>	The greater-than sign is used to send to a file, or even a printer or other device, whatever information from the command would have been displayed in the Command Prompt window had you not used the operator.	assoc > types.txt
>>	The double greater-than sign works just like the single greater-than sign but the information is appended to the end of the file instead of overwriting it.	ipconfig >> netdata.txt
<	The less-than sign is used to read the input for a command from a file instead of from the keyboard.	sort < data.txt
|	The vertical pipe is used to read the output from one command and use if for the input of another.	dir | sort

8. Which command is used to review boot messages?
[ec2-user@ip-172-31-35-6 dir2]$ dmesg > file6.txt
[ec2-user@ip-172-31-35-6 dir2]$ tail -n 10 file6.txt
[    7.405529] EDAC sbridge: Seeking for: PCI ID 8086:2fa0
[    7.410685] EDAC sbridge:  Ver: 1.1.2
[    7.445087] random: crng init done
[    7.448917] random: 7 urandom warning(s) missed due to ratelimiting
[    7.475311] device-mapper: uevent: version 1.0.3
[    7.480453] device-mapper: ioctl: 4.37.0-ioctl (2017-09-20) initialised: dm-devel@redhat.com
[    7.610333] RPC: Registered named UNIX socket transport module.
[    7.610333] RPC: Registered udp transport module.
[    7.610334] RPC: Registered tcp transport module.
[    7.610334] RPC: Registered tcp NFSv4.1 backchannel transport module.

##9. Which command is used to change the permissions of a file? Explain its usage?
Chmod 

Read – 4
Write -2
Execute -1
Read+write = 4+2=6
Read+write+excute = 4+2+1=7
Ugo(User,group,others)

[ec2-user@ip-172-31-35-6 dir2]$ ls -l
total 40
-rw-rw-r-- 1 ec2-user ec2-user    80 Apr  3 04:08 file3.txt
-rw-rw-r-- 1 ec2-user ec2-user   195 Apr  3 05:41 file4.txt
-rw-rw-r-- 1 ec2-user ec2-user     3 Mar 29 17:51 file5.txt
-rw-rw-r-- 1 ec2-user ec2-user 26811 Apr  3 06:14 file6.txt
[ec2-user@ip-172-31-35-6 dir2]$ ls -a
.  ..  file3.txt  file4.txt  file5.txt  file6.txt
[ec2-user@ip-172-31-35-6 dir2]$ chmod 777 file3.txt
[ec2-user@ip-172-31-35-6 dir2]$ ls -l
total 40
-rwxrwxrwx 1 ec2-user ec2-user    80 Apr  3 04:08 file3.txt
-rw-rw-r-- 1 ec2-user ec2-user   195 Apr  3 05:41 file4.txt
-rw-rw-r-- 1 ec2-user ec2-user     3 Mar 29 17:51 file5.txt
-rw-rw-r-- 1 ec2-user ec2-user 26811 Apr  3 06:14 file6.txt
[ec2-user@ip-172-31-35-6 dir2]$ chmod 764 file4.txt
[ec2-user@ip-172-31-35-6 dir2]$ ls -l
total 40
-rwxrwxrwx 1 ec2-user ec2-user    80 Apr  3 04:08 file3.txt
-rwxrw-r-- 1 ec2-user ec2-user   195 Apr  3 05:41 file4.txt
-rw-rw-r-- 1 ec2-user ec2-user     3 Mar 29 17:51 file5.txt
-rw-rw-r-- 1 ec2-user ec2-user 26811 Apr  3 06:14 file6.txt

##10. Which command would you use to create a file system on a new hard drive?
Commands for Creating a Customized File System
This section describes the two commands you use to create a customized file system:
•	newfs
•	mkfs
The newfs Command Syntax, Options, and Arguments
The newfs command is a friendlier version of the mkfs command that is used to create file systems. The newfs command is located in the /usr/sbin directory.
The syntax is:
newfs [-Nv] [mkfs_options] raw_device

##11. How to compress files in Linux?
Syntax	Description	Example(s)
gzip {filename}	Gzip compress the size of the given files using Lempel-Ziv coding (LZ77). Whenever possible, each file is replaced by one with the extension .gz.	gzip mydata.doc
gzip *.jpg
ls -l
bzip2 {filename}	bzip2 compresses files using the Burrows-Wheeler block sorting text compression algorithm, and Huffman coding. Compression is generally considerably better than that achieved by bzip command (LZ77/LZ78-based compressors). Whenever possible, each file is replaced by one with the extension .bz2.	bzip2 mydata.doc
bzip2 *.jpg
ls -l
zip {.zip-filename} {filename-to-compress}	zip is a compression and file packaging utility for Unix/Linux. Each file is stored in single .zip {.zip-filename} file with the extension .zip.	zip mydata.zip mydata.doc
zip data.zip *.doc
ls -l
tar -zcvf {.tgz-file} {files}
tar -jcvf {.tbz2-file} {files}	The GNU tar is archiving utility but it can be use to compressing large file(s). GNU tar supports both archive compressing through gzip and bzip2. If you have more than 2 files then it is recommended to use tar instead of gzip or bzip2.
-z: use gzip compress
-j: use bzip2 compress	tar -zcvf data.tgz *.doc
tar -zcvf pics.tar.gz *.jpg *.png
tar -jcvf data.tbz2 *.doc
ls -l

##12. Which file is used to automatically mount file systems on boot?
To have Linux automatically mount the file system on your new hard disk partition, you only need to add its name to the fstab file. You can do this by directly and carefully editing the /etc/fstab file to type in a new entry.

##13. Find out the purpose of each of the following commands:
•	shutdown
The shutdown command in Linux is used to shutdown the system in a safe way. ... options – Shutdown options such as halt, power-off (the default option) or reboot the system.
•	Diff
Diff between two files in a directory
•	Sort
Sorts the contents of a file line by line
[ec2-user@ip-172-31-35-6 dir2]$ cat file3.txt
this is first line in file3
this line is for practice
this line gives the count
[ec2-user@ip-172-31-35-6 dir2]$ sort file3.txt
this is first line in file3
this line gives the count
this line is for practice
•	Ps
Lists the active processes in the system at a given time
•	Kill
To kill a particular process
•	Mount
To mount a new device, hard drive
•	Nano
GUI editor to edit, modify contents of a file

##14. What are symbolic links? How do you create one using command?
A symbolic link, also known as a symlink or soft link, is a special type of file that points to another file or directory.
ln -s source_file symbolic_link

##15. How would you copy a file or a directory from your system to another system on the same network?
scp <source> <destination>
sftp <host>
ftp <host>
sftp> put test.txt
Uploading test.txt to /home/admin/test.txt
sftp> ls
Applications    Downloads   Movies      Public
Desktop     Dropbox     Music     node_modules
Documents   test.txt 
